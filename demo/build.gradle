plugins {
    id 'org.springframework.boot' version '2.7.3'
    id 'io.spring.dependency-management' version '1.0.13.RELEASE'
    id 'java'
    id "com.moowork.node" version "1.3.1"
}
apply plugin: "com.moowork.node"
group = 'com.example'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '17'

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter'
    compileOnly 'org.projectlombok:lombok'
    developmentOnly 'org.springframework.boot:spring-boot-devtools'
    annotationProcessor 'org.projectlombok:lombok'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.postgresql:postgresql'
    implementation 'org.springframework.boot:spring-boot-devtools'

}

tasks.named('test') {
    useJUnitPlatform()
}

// npm install
task appNpmInstall(type: Exec) {
    workingDir "${project.projectDir}/../react-test"
    inputs.dir "${project.projectDir}/../react-test"
    if (System.getProperty("os.name").toLowerCase(Locale.ROOT).contains('windows')) {
        commandLine "npm.cmd", "install"
    } else {
        commandLine "npm", "install"
    }
}

//npm build
task npmBuild(type: Exec) {
    dependsOn("appNpmInstall")
    workingDir "${project.projectDir}/../react-test"
    inputs.dir "${project.projectDir}/../react-test"
    if (System.getProperty("os.name").toLowerCase(Locale.ROOT).contains('windows')) {
        commandLine "npm.cmd", "run", "build:prod"
    } else {
        commandLine "npm", "run", "build:prod"
    }
}
// build 경로를 webpack으로 미리 설정 하였으므로, build 결과 이동 관련 Task 제외
compileJava.dependsOn("npmBuild")

